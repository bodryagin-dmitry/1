              						   --задания--
						--легенькие--				 
--1/ Выведите на экран любое сообщение
SELECT 'это любое сообщение';

--2/ Выведите на экран текущую дату
SELECT CURRENT_DATE;

--3/ Создайте две числовые переменные и присвойте им значение.
--Выполните математические действия с этими числами и
--выведите результат на экран.
--p.s. от себя запихнул мат. действие в функцию :)
CREATE OR REPLACE PROCEDURE z3 (INOUT x int, y int)
LANGUAGE plpgsql
AS $$
DECLARE s int;
BEGIN
	s = x + y;
	RAISE NOTICE 'sum(x,y) = %', s;
END;
$$;

CALL z3 (3, 5)

--4/ Написать программу двумя способами 1 - использование IF,
--2 - использование CASE. Объявите числовую переменную и
--присвоейте ей значение. Если число равно 5 - выведите на
--экран "Отлично". 4 - "Хорошо". 3 - Удовлетворительно". 2 - "Неуд".
--В остальных случаях выведите на экран сообщение,
--что введённая оценка не верна.

--ифками
CREATE OR REPLACE PROCEDURE z4 (INOUT x int)
LANGUAGE plpgsql
AS $$
BEGIN
	IF x = 5 THEN
		RAISE NOTICE 'Отлично, %', x;
	ELSIF x = 4 THEN
		RAISE NOTICE 'Хорошо, %', x;
	ELSIF x = 3 THEN
		RAISE NOTICE 'Удовлетворительно, %', x;
	ELSIF x = 2 THEN
		RAISE NOTICE 'Неуд, %', x;
	ELSE
		RAISE NOTICE 'введённая оценка не верна, %', x;
	END IF;
END;
$$;

--кейсиками
CREATE OR REPLACE PROCEDURE z4 (INOUT x int)
LANGUAGE plpgsql
AS $$
BEGIN
	CASE
		WHEN x = 5 THEN RAISE NOTICE 'Отлично, %', x;
		WHEN x = 4 THEN RAISE NOTICE 'Хорошо, %', x;
		WHEN x = 3 THEN RAISE NOTICE 'Удовлетворительно, %', x;
		WHEN x = 2 THEN RAISE NOTICE 'Неуд, %', x;
		ELSE RAISE NOTICE 'введённая оценка не верна, %', x;
	END CASE;
END;
$$;


CALL z4 (2)

--5/ Выведите все квадраты чисел от 20 до 30 3-мя разными
--способами (Loop, while, for)				 

--loop
CREATE OR REPLACE PROCEDURE z5 ()
LANGUAGE plpgsql
AS $$
DECLARE x int; i int;
BEGIN
i=20;
	LOOP 
	x= i*i;
		RAISE NOTICE 'x = %', x;
	i=i+1;
	EXIT WHEN i=31;
	END LOOP;
END;
$$;	

CALL z5	()


--while
CREATE OR REPLACE PROCEDURE z5 ()
LANGUAGE plpgsql
AS $$
DECLARE x int;i int;
BEGIN
i=20;
	WHILE i< 31 LOOP
		x= i*i;
		RAISE NOTICE 'x = %', x;
	i=i+1;		
	END LOOP;
END;
$$;	

CALL z5	()	
		
		
--for			 
CREATE OR REPLACE PROCEDURE z5 ()
LANGUAGE plpgsql
AS $$
DECLARE x int;
BEGIN
	FOR i IN 20..30 LOOP
		x= i*i;
			RAISE NOTICE 'x = %', x;
	END LOOP;
END;
$$;	

CALL z5	()	

						--посложнее--	 
--1.Вспомните задание из 1.PLSQL (6) - посследовательность Коллатца.
--Напишите функцию, входной параметр - начальное число,
--на выходе - количество чисел, пока не получим 1.--
CREATE OR REPLACE PROCEDURE kollatc (INOUT x int)
LANGUAGE plpgsql
AS $$
DECLARE num int;
BEGIN
num=1;
	FOR i IN 1..100 LOOP
		IF mod(x,2) = 0 THEN
			x:= x / 2;
			num := num + 1;
		ELSE
			x := (x * 3)+1;
			num := num + 1;
		END IF;
  		EXIT WHEN x = 1;
	END LOOP;
	RAISE NOTICE 'num = %', num;
END;
$$;

--запускает функцию и выводит в сообщения--
DO $$
DECLARE x int :=10;
BEGIN
	CALL kollatc(x);
	RAISE NOTICE 'x = %', x;
END;
$$;

--1.Вспомните задание из 1.PLSQL (6) - последовательность Коллатца.
--Напишите процедуру, которая выводит все числа последовательности
--Входной параметр - начальное число.--
CREATE OR REPLACE PROCEDURE kollatc (INOUT x int)
LANGUAGE plpgsql
AS $$
DECLARE num int;
BEGIN
	FOR i IN 1..100 LOOP
		IF mod(x,2) = 0 THEN
			x:= x / 2;
			RAISE NOTICE 'x = %', x;
		ELSE
			x := (x * 3)+1;
			RAISE NOTICE 'x = %', x;
		END IF;
  		EXIT WHEN x = 1;
	END LOOP;
END;
$$;

--запускает функцию и выводит в сообщения--
DO $$
DECLARE x int :=10;
BEGIN
	CALL kollatc(x);
	RAISE NOTICE 'x = %', x;
END;
$$;

--2.Вспомните задание из 1.PLSQL (7) - числа Люка.
--Напишите фунцию, входной параметр - количество чисел,
--на выходе - последнее число
--(Например: входной 5, 2 1 3 4 7 - на выходе число 7).--
CREATE OR REPLACE PROCEDURE luk (INOUT x int)
LANGUAGE plpgsql
AS $$
DECLARE l0 int; l1 int; l2 int; l3 int; l4 int;
BEGIN

RAISE NOTICE 'l0 = 2';
RAISE NOTICE 'l1 = 1';
	FOR i IN 3..x LOOP
	l0=2; l1=1; l2=l0+l1; l3=l1+l2;
	i=i+1;
		l0 = l1;
    	l1 = l2;
    	l2 = l3;
    	l3 = l1 + l2;
	END LOOP;
	RAISE NOTICE 'ln = %', l3;
END;
$$;

DO $$
DECLARE x int :=5;
BEGIN
	CALL luk(x);
	--RAISE NOTICE 'x = %', x;
END;
$$;
--2.Вспомните задание из 1.PLSQL (7) - числа Люка.
--Напишите процедуру, которая выводит все числа последовательности.
--Входной параметр - количество чисел.--
CREATE OR REPLACE PROCEDURE luk (INOUT x int)
LANGUAGE plpgsql
AS $$
DECLARE l0 int; l1 int; l2 int; l3 int; l4 int;
BEGIN
RAISE NOTICE 'l0 = 2'; RAISE NOTICE 'l1 = 1';
	FOR i IN 3..x LOOP
	l0=2; l1=1; l2=l0+l1; l3=l1+l2;
	i=i+1;
		l0 = l1;
    	l1 = l2;
    	l2 = l3;
    	l3 = l1 + l2;
		IF i = x THEN
		RAISE NOTICE 'l = %,%,%', l1,l2,l3;
		END IF;
	END LOOP;
END;
$$;

DO $$
DECLARE x int :=5;
BEGIN
	CALL luk(x);
END;
$$;
