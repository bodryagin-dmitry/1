--Многотабличные запросы--

--1. Вывести все имена и фамилии студентов, и название хобби, которым занимается этот студент--
SELECT s.name, s.surname, h.name
FROM student s, student_hobby sh, hobby h
WHERE s.id = sh.student_id AND h.id = sh.hobby_id
--2. Вывести информацию о студенте, занимающимся хобби самое продолжительное время--
SELECT sh.date_start, s.name, s.surname
FROM student s, student_hobby sh
WHERE s.id = sh.student_id AND sh.date_finish IS null 
ORDER BY sh.date_start
LIMIT 1
--3.Вывести имя, фамилию, номер зачетки и дату рождения для студентов, средний балл которых выше среднего,
--а сумма риска всех хобби, которыми он занимается в данный момент, больше 0.9.--
SELECT st.id, st.name, st.surname, st.data_birth
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND sh.date_finish IS NULL
INNER JOIN hobby h
ON sh.hobby_id = h.id
WHERE st.score >
(SELECT avg(score) FROM student) AND (SELECT SUM(risk) FROM hobby) > 0.9
-- 4.Вывести фамилию, имя, зачетку, дату рождения, название хобби и 
--длительность в месяцах, для всех завершенных хобби--
SELECT st.id, st.name, st.surname, st.data_birth, h.name, 
sh.date_start, sh.date_finish,
((sh.date_finish - sh.date_start)/31) duration
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND sh.date_finish IS NOT NULL
INNER JOIN hobby h ON sh.hobby_id = h.id
--5.Вывести фамилию, имя, зачетку, дату рождения студентов, которым исполнилось N
-- полных лет на текущую дату, и которые имеют более 1 действующего хобби.--
SELECT st.id, st.name, st.surname, st.data_birth, h.name, 
((CURRENT_DATE - st.data_birth)/365) years_old
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h ON sh.hobby_id = h.id 
-- 6.Найти средний балл в каждой группе, учитывая только баллы студентов, которые имеют хотя бы одно действующее хобби.--
SELECT st.n_group, avg(score)::NUMERIC(3, 2) avg_score 
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
INNER JOIN hobby h 
ON sh.hobby_id = h.id AND sh.date_finish IS NOT NULL
GROUP BY st.n_group 
-- 7.Найти название, риск, длительность в месяцах самого продолжительного хобби из действующих, указав номер зачетки студента.--
SELECT st.id, st.n_group, h.name, h.risk,
(CURRENT_DATE - sh.date_start)/30 dur, sh.date_start, sh.date_finish
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
INNER JOIN hobby h  ON sh.hobby_id = h.id
ORDER BY dur DESC 
LIMIT 1
-- 8.Найти все хобби, которыми увлекаются студенты, имеющие максимальный балл.--
SELECT h.name
FROM student_hobby sh 
INNER JOIN student st ON sh.student_id = st.id
INNER JOIN hobby h  ON sh.hobby_id = h.id
WHERE st.score = (SELECT max(score)
FROM student)
-- 9.Найти все действующие хобби, которыми увлекаются троечники 2-го курса. --
SELECT h.name
FROM student st, hobby h, student_hobby sh
WHERE st.id = sh.student_id AND h.id = sh.hobby_id
AND CAST(n_group AS VARCHAR) like '2%' AND score >= 2.5
AND score < 3.5
-- 10. Найти номера курсов, на которых более 50% студентов имеют более одного действующего хобби.--

-- 11.Вывести номера групп, в которых не менее 60% студентов имеют балл не ниже 4.--
SELECT n_group, count(id) all_students, count(id) filter(WHERE score >= 4) 
count_4, count(id) filter(WHERE score >= 4)*1.0 / count(id) 
FROM student
GROUP BY n_group
HAVING (count(id) filter
 (WHERE score >= 4)*1.0 / count(id)) > 0.6
--12.Для каждого курса подсчитать количество различных действующих хобби на курсе.

--13.Вывести номер зачётки, фамилию и имя, дату рождения и номер курса для
--всех отличников, не имеющих хобби. Отсортировать данные по возрастанию
--в пределах курса по убыванию даты рождения.
SELECT st.id, st.surname, st.name, st.data_birth, st.n_group
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
AND sh.date_finish IS NOT NULL
OR sh.date_start IS NULL
WHERE st.score > 4.5
GROUP BY st.id
ORDER BY st.data_birth DESC
--14.Создать представление, в котором отображается вся информация о студентах,
--которые продолжают заниматься хобби в данный момент и занимаются им как минимум 5 лет.
CREATE OR REPLACE VIEW Students_VW1 AS
SELECT st.*
FROM student st, hobby h, student_hobby sh
WHERE st.id = sh.student_id AND h.id = sh.hobby_id AND sh.date_finish IS NULL
AND extract(year from age(now(), sh.date_start)) >= 5
--15.Для каждого хобби вывести количество людей, которые им занимаются.
SELECT count(st.id) klvo_students, sh.hobby_id
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
AND sh.date_finish IS NULL 
GROUP BY sh.hobby_id
--16.Вывести ИД самого популярного хобби.
SELECT count(st.id) count_students, 
sh.hobby_id
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND
sh.date_finish IS NULL 
GROUP BY sh.hobby_id
ORDER BY count(st.id) DESC
--17.Вывести всю информацию о студентах, занимающихся самым популярным хобби.
SELECT st.id, st.name, st.surname, st.data_birth, st.adress, st.score, st.n_group
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
AND sh.date_finish IS NULL AND sh.hobby_id = (SELECT sh.hobby_id
FROM student_hobby sh
WHERE sh.date_finish IS NULL
GROUP BY sh.hobby_id
ORDER BY count(sh.id) DESC
LIMIT 1 
)
--18.Вывести ИД 3х хобби с максимальным риском.
SELECT hh.id, hh.risk
FROM hobby hh
ORDER BY hh.risk DESC
LIMIT 3
--19.Вывести 10 студентов, которые занимаются одним (или несколькими)
--хобби самое продолжительно время.
SELECT st.name, st.surname, st.n_group
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
AND sh.date_finish IS NULL 
GROUP BY (st.id, sh.date_start)
ORDER BY (CURRENT_DATE - sh.date_start) DESC
LIMIT 10
--20.Вывести номера групп (без повторений), в которых учатся
--студенты из предыдущего запроса.
SELECT DISTINCT st.n_group
FROM student st
WHERE st.id IN (
SELECT sh.student_id
FROM student_hobby sh
WHERE sh.date_finish IS NULL 
GROUP BY (sh.student_id, sh.date_start)
ORDER BY (CURRENT_DATE - sh.date_start) DESC
LIMIT 10
)
--21.Создать представление, которое выводит номер зачетки,
--имя и фамилию студентов, отсортированных по убыванию среднего балла.
CREATE OR REPLACE VIEW Students_VW2 AS
SELECT st.id, st.name, st.surname
FROM student st
ORDER BY st.score DESC
--22.Представление: найти каждое популярное хобби на каждом курсе.
SELECT DISTINCT ON (n_course) h.name, (st.n_group/1000) n_course
FROM student_hobby sh
INNER JOIN student st ON sh.student_id = st.id
AND sh.date_finish IS NULL
INNER JOIN hobby h ON sh.hobby_id = h.id 
GROUP BY (st.n_group/1000, h.id)
ORDER BY n_course, count(sh.id)
--23.Представление: найти хобби с максимальным риском среди самых
--популярных хобби на 2 курсе.

--24.Представление: для каждого курса подсчитать количество
--студентов на курсе и количество отличников.

--25.Представление: самое популярное хобби среди всех студентов.

--26.Создать обновляемое представление.

--27.Для каждой буквы алфавита из имени найти максимальный,
--средний и минимальный балл. (Т.е. среди всех студентов,
--чьё имя начинается на А (Алексей, Алина, Артур, Анджела)
--найти то, что указано в задании. Вывести на экран тех, максимальный
--балл которых больше 3.6

--28.Для каждой фамилии на курсе вывести максимальный и
--минимальный средний балл. (Например, в университете
--учатся 4 Иванова (1-2-3-4). 1-2-3 учатся на 2 курсе и имеют
--средний балл 4.1, 4, 3.8 соответственно, а 4 Иванов учится на 3 курсе
--и имеет балл 4.5. На экране должно быть следующее:
--2 Иванов 4.1 3.8 3 Иванов 4.5 4.5

--29.Для каждого года рождения подсчитать количество хобби,
--которыми занимаются или занимались студенты.
SELECT st.data_birth, count(hh.name)
FROM student st, hobby hh, student_hobby sh
WHERE st.id = sh.student_id
AND hh.id = sh.hobby_id
GROUP BY st.data_birth
--30.Для каждой буквы алфавита в имени найти максимальный и минимальный риск хобби.

--31.Для каждого месяца из даты рождения вывести средний
--балл студентов, которые занимаются хобби с названием «Футбол»(у меня другое)
SELECT f.month, avg(st.score)::real
FROM student st, hobby hh, student_hobby sh,
(SELECT st.id, date_part('month', st.data_birth) as month
FROM student st) as f
WHERE st.id = sh.student_id AND hh.id = sh.hobby_id
AND hh.name = 'Рисование' AND f.id = st.id
GROUP BY f.month
--32.Вывести информацию о студентах, которые занимались или
--занимаются хотя бы 1 хобби в следующем формате:
--Имя: Иван, фамилия: Иванов, группа: 1234

--33.Найдите в фамилии в каком по счёту символа встречается «ов».
--Если 0 (т.е. не встречается, то выведите на экран «не найдено».

--34.Дополните фамилию справа символом # до 10 символов.

--35.При помощи функции удалите все символы # из предыдущего запроса.

--36.Выведите на экран сколько дней в апреле 2018 года.
SELECT '2018-05-01'-'2018-04-01'::DATE 
april_days
--37.Выведите на экран какого числа будет ближайшая суббота.

--38.Выведите на экран век, а также какая сейчас неделя года и день года.

--40.Выведите всех студентов, которые занимались или занимаются
--хотя бы 1 хобби. Выведите на экран Имя, Фамилию, Названию хобби,
--а также надпись «занимается», если студент продолжает заниматься
--хобби в данный момент или «закончил», если уже не занимает.



